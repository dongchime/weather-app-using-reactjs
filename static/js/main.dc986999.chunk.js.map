{"version":3,"sources":["logo.svg","Weather.js","Details.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Weather","_ref","temperature","summary","react_default","a","createElement","className","Math","round","Details","apparentTemperature","humidity","windSpeed","uvindex","App","state","_renderWeather","src_Weather","_this","weathers","_renderDetail","src_Details","uvIndex","_getWeathers","_callee","regenerator_default","wrap","_context","prev","next","_callApi","sent","setState","stop","this","fetch","then","response","json","currently","catch","err","console","log","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.dc986999.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport propTypes from 'prop-types';\nimport './Weather.css';\n\nfunction Weather({temperature, summary}) {\n    return (\n        <div className=\"Weather\">\n            <div className=\"Weather__Location\">\n                <div className=\"Location_detail\">Yeon-dong, Jeju</div>\n                <div className=\"Location_country\">South Korea</div>\n            </div>\n\n            <div className=\"Weather__Summary\">{summary}</div>\n            <div className=\"Weather__Temperature\">{Math.round((temperature - 32) * 5/9)}°</div>\n        </div>\n    )\n}\n\nWeather.propTypes = {\n    temperature: propTypes.number.isRequired,\n    summary: propTypes.string.isRequired\n}\n\nexport default Weather;","import React from 'react';\nimport propTypes from 'prop-types';\nimport './Details.css';\n\nfunction Details({apparentTemperature, humidity, windSpeed, uvindex}) {\n    return (\n        <div className=\"Details\">\n            <table className=\"Details__Table\">\n                <tbody>\n                    <tr>\n                        <th className=\"leftside\">Details</th>\n                        <th></th>\n                    </tr>\n                    <tr>\n                        <td className=\"leftside\">Feels like</td>\n                        <td className=\"rightside\">{Math.round((apparentTemperature - 32) * 5/9)}°</td>\n                    </tr>\n                    <tr>\n                        <td className=\"leftside\">Humidity</td>\n                        <td className=\"rightside\">{humidity} %</td>\n                    </tr>\n                    <tr>\n                        <td className=\"leftside\">Wind speed</td>\n                        <td className=\"rightside\">{windSpeed} km/h</td>\n                    </tr>\n                    <tr>\n                        <td className=\"leftside\">UV Index</td>\n                        <td className=\"rightside\">{uvindex}</td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    )\n}\n\nDetails.propTypes ={\n    apparentTemperature: propTypes.number.isRequired,\n    humidity: propTypes.number.isRequired,\n    windSpeed: propTypes.number.isRequired,\n    uvindex: propTypes.number.isRequired\n}\n\nexport default Details;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport Weather from './Weather';\nimport Details from './Details';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n\n  }\n  \n  componentDidMount() {\n    this._getWeathers();\n  }\n\n  _renderWeather = () => {\n    return <Weather \n      temperature={this.state.weathers.temperature}\n      summary={this.state.weathers.summary}\n    />\n  }\n\n  _renderDetail = () => {\n    return <Details \n      apparentTemperature={this.state.weathers.apparentTemperature}\n      humidity={this.state.weathers.humidity}\n      windSpeed={this.state.weathers.windSpeed}\n      uvindex={this.state.weathers.uvIndex}\n    />\n  }\n\n  _getWeathers = async () => {\n    const weathers = await this._callApi();\n    this.setState({\n      weathers\n    });\n  }\n\n  _callApi = () => {\n    return fetch('https://api.darksky.net/forecast/66db38eb80fe74ffea21c00c467999ac/33.4881579,126.4947632')\n    .then(response => response.json())\n    .then(json => json.currently)\n    .catch(err => console.log(err))\n  }\n\n  render() {\n    return (\n      <div className={this.state.weathers ? \"App\" : \"App__loading\"}>\n          {this.state.weathers ? this._renderWeather() : 'Loading'}<br />\n          {this.state.weathers ? this._renderDetail() : 'Loading'}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}